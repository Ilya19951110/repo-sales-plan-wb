
import pandas as pd
from datetime import datetime, timedelta
import requests
from scripts.google_sh import get_api_in_master_table, save_in_gsh
from time import sleep
import time
import tracemalloc
from scripts.date_export import get_date_range_for_export


def get_report_detail_sales(api, name):
    url = 'https://seller-analytics-api.wildberries.ru/api/v2/nm-report/detail'
    all_data = []
    stop = 21
    page = 1

    begin_date, end_date = get_date_range_for_export()
    begin_date = begin_date.strftime("%Y-%m-%d 00:00:00")
    end_date = end_date.strftime("%Y-%m-%d 23:59:59")

    while True:

        headers = {
            'Authorization': api,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        params = {

            'timezone': 'Europe/Moscow',
            'period': {

                'begin': begin_date,
                'end': end_date
            },
            'orderBy': {
                'field': 'openCard',
                'mode': 'desc'
            },
            'page': page
        }
        print(f'–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–∞–±–∏–Ω–µ—Ç—É: {name}')
        requests_report = requests.post(url, headers=headers, json=params)

        if requests_report.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {requests_report.status_code}")
            print(requests_report.text)
            break

        result = requests_report.json()

        cards = result.get('data', {}).get('cards', [])

        if not cards:
            break

        all_data.extend(cards)

        print(
            f"\033[92m–ü–æ–ª—É—á–µ–Ω–æ {len(cards)} –∑–∞–ø–∏—Å–µ–π –∫–∞–±–∏–Ω–µ—Ç–∞. –í—Å–µ–≥–æ: {len(all_data)}\033[0m")

        if len(cards) < 1_000:
            break
        page += 1
        print(f"‚è± –°–ø–∏–º {stop} —Å–µ–∫...")

        sleep(stop)

    return all_data


def get_current_week_sales_df(sales):

    def read_to_json(data, parent_key='', sep='_'):
        items = []

        for k, v in data.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.extend(read_to_json(v, new_key, sep=sep).items())
            else:
                items.append((new_key, v))

        return dict(items)

    data = [read_to_json(item) for item in sales]
    df = pd.DataFrame(data)

    assert isinstance(df, pd.DataFrame), "–í—Ö–æ–¥–Ω–æ–π df –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DataFrame"

    columns_rus = [
        '–ê—Ä—Ç–∏–∫—É–ª WB', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ë—Ä–µ–Ω–¥', 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏', '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤', '–°—É–º–º–∞ –≤—ã–∫—É–ø–æ–≤ (—Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω', '–°—É–º–º–∞ –æ—Ç–º–µ–Ω (—Ä—É–±)', '–°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±)',
        '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (%)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑ (%)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤—ã–∫—É–ø (%)', '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø—Ä–µ–¥.)', '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø—Ä–µ–¥.)',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤ (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –≤—ã–∫—É–ø–æ–≤ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –æ—Ç–º–µ–Ω (–ø—Ä–µ–¥., —Ä—É–±)', '–°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å (–ø—Ä–µ–¥.)',
        '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø—Ä–µ–¥., %)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑ (–ø—Ä–µ–¥., %)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤—ã–∫—É–ø (–ø—Ä–µ–¥., %)', '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (%)',
        '–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–∫—É–ø–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –≤—ã–∫—É–ø–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–º–µ–Ω (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –æ—Ç–º–µ–Ω (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä. –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å (%)',
        '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä. —Ü–µ–Ω—ã (%)', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∑–∞–∫–∞–∑', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –≤—ã–∫—É–ø', '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ WB'
    ]

    df = df.rename(
        columns=dict(zip(df.columns.tolist(), columns_rus))
    )

    date_col = ['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞',
                '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞']

    df[date_col] = df[date_col].apply(
        pd.to_datetime, errors='coerce').apply(lambda x: x.dt.date)

    current_week_col = df.columns[:df.columns.get_loc(
        '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞')].tolist() + df.columns[-3:].tolist()

    current_week = df[current_week_col].copy()

    current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'] = pd.to_datetime(
        current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'])

    current_week['–ù–æ–º–Ω–µ–¥'] = current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'].dt.isocalendar().week

    current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'] = pd.to_datetime(
        current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞']).dt.date

    current_week = current_week.drop_duplicates()
    print(current_week.columns.tolist(), '', current_week.head(5), sep='\n')

    return current_week


if __name__ == '__main__':
    tracemalloc.start()
    begin = time.time()
    cabinet = {}

    for name, (api, _) in get_api_in_master_table().items():
        try:
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {name}")
            data_json = get_report_detail_sales(api=api, name=name)
            cabinet[name] = get_current_week_sales_df(data_json)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {name}: {e}")

    save_in_gsh(cabinet=cabinet, sheet_name='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (api)')
    end = time.time()

    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è get_sales: {(end-begin)/60:,.2f}")

    snapshot = tracemalloc.take_snapshot()
    top_stats = snapshot.statistics('lineno')

    current, peak = tracemalloc.get_traced_memory()
    print(
        f"üîç –ü–∞–º—è—Ç—å —Å–µ–π—á–∞—Å: {current / 10**6:.2f} MB; –ü–∏–∫: {peak / 10**6:.2f} MB")

    print("[–¢–û–ü –ø–æ –ø–∞–º—è—Ç–∏:]")
    for stat in top_stats[:5]:
        print(stat)
