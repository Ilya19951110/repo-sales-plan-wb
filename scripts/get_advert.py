from scripts.google_sh import get_api_in_master_table, save_in_gsh
from scripts.date_export import get_date_range_for_export
from scripts.parse_cabinet import parse_args
import numpy as np
import pandas as pd
import requests


def get_fullstats_advert(name, api):

    url_count = 'https://advert-api.wildberries.ru/adv/v1/promotion/count'
    url2 = "https://advert-api.wildberries.ru/adv/v2/fullstats"

    start_date, end_date = get_date_range_for_export()

    start_date, end_date = start_date.strftime(
        '%Y-%m-%d'), end_date.strftime('%Y-%m-%d')

    headers = {'Authorization': api}

    print(f'–ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ: {name}')
    promo_count = requests.get(url_count, headers=headers)

    if promo_count.status_code == 200:
        data = promo_count.json()

    else:
        print(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ count: {promo_count.status_code}: {promo_count.text}")

    advertID = [adv['advertId'] for a in data['adverts']
                for adv in a['advert_list']]

    print(f"–î–ª–∏–Ω–∞ advertID –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {name} = {len(advertID)}")

    params = [{'id': c, 'interval': {'begin': start_date, 'end': end_date}}
              for c in advertID]
    all_stats = []
    try:
        print(
            f'–ù–∞—á–∏–Ω–∞—é fullstats –∑–∞–ø—Ä–æ—Å –∫ {name} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∫–∏ —Ä–∫.\n–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {start_date}\n–¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞: {end_date}')

        response = requests.post(url2, headers=headers, json=params)

        if response .status_code == 400 and "no companies with correct intervals" in response .text:
            print(
                f"\033[91m ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ ({start_date} ‚Äî {end_date}) –¥–ª—è {name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.\033[0m")

        if response .status_code != 200:
            print(
                f"\033[91m‚ùå –û—à–∏–±–∫–∞ {response .status_code}: {response .text}\033[0m")

        full_stats = response .json()

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(full_stats)} –∑–∞–ø–∏—Å–µ–π")
        all_stats.extend(full_stats)

    except Exception as e:
        print(
            f"\033[91müö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ fullstats –¥–ª—è {name}: {e}\033[0m")

    top_level_campaign_metrics_df = pd.DataFrame([{
        'advertId': campaign.get('advertId'),
        'views': campaign.get('views', 0),
        'clicks': campaign.get('clicks', 0),
        'ctr': campaign.get('ctr', 0),
        'cpc': campaign.get('cpc', 0),
        'sum': campaign.get('sum', 0),
        'atbs': campaign.get('atbs', 0),
        'orders': campaign.get('orders', 0),
        'cr': campaign.get('cr', 0),
        'shks': campaign.get('shks', 0),
        'sum_price': campaign.get('sum_price', 0),

    } for campaign in all_stats])

    #  –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –¥–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    camp_data = []
    for c in all_stats:
        for d in c['days']:
            for a in d['apps']:
                for nm in a['nm']:
                    nm['appType'] = a['appType']
                    nm['date'] = d['date']
                    nm['advertId'] = c['advertId']

                    camp_data.append(nm)

    camp_df = pd.DataFrame(camp_data)

    print(camp_df.columns.tolist(),
          f'–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ä–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã. –ö–∞–±–∏–Ω–µ—Ç: {name}', sep='\n')

    camp_df['date'] = pd.to_datetime(camp_df['date']).dt.date

    camp_df = camp_df.rename(columns={
        'sum': 'SUM'
    })

    group_df = camp_df.groupby([
        'date', 'nmId', 'name'
    ]).agg({
        'views': 'sum',
        'clicks': 'sum',
        'atbs': 'sum',
        'orders': 'sum',
        'shks': 'sum',
        'sum_price': 'sum',
        'SUM': 'sum'

    }).reset_index()

    group_df['CTR'] = np.where(
        group_df['views'] == 0,
        0,
        (
            group_df['clicks'] / group_df['views'] * 100
        ).round(2)
    )

    group_df['CR'] = np.where(
        group_df['clicks'] == 0,
        0,
        (
            group_df['orders'] / group_df['clicks'] * 100
        ).round(2)
    )

    group_df['CPC'] = np.where(
        group_df['clicks'] == 0,
        0,
        (
            group_df['SUM'] / group_df['clicks']
        ).round(2)
    )

    group_df = group_df.drop(columns=[
        'advertId', 'appType'
    ], errors='ignore').sort_values(['SUM', 'views'],  ascending=[False, False]).reset_index(drop=True)

    group_df['nmId'] = group_df['nmId'].astype(int)
    # group_df['date'] = group_df['date'].astype(str)
    group_df['name'] = group_df['name'].replace(
        '', '-').fillna('-')

    for col in [cols for cols in group_df.columns if cols not in ['date', 'name']]:
        group_df[col] = group_df[col].fillna(0)

    group_df = group_df.rename(columns={
        'views': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
        'clicks': '–ü–µ—Ä–µ—Ö–æ–¥—ã',
        'SUM': '–†–∞—Å—Ö–æ–¥—ã,‚ÇΩ',
        'atbs': '–î–æ–±–∞–≤–∏–ª–∏–≤–ö–æ—Ä–∑–∏–Ω—É',
        'orders': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ó–∞–∫–∞–∑–æ–≤',
        'shks': '–ö–æ–ª-–≤–æ–ó–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö–¢–æ–≤–∞—Ä–æ–≤,—à—Ç',
        'sum_price': '–ó–∞–∫–∞–∑–æ–≤–ù–∞–°—É–º–º—É,‚ÇΩ',
        'name': '–ü—Ä–µ–¥–º–µ—Ç',
        'nmId': '–ê—Ä—Ç–∏–∫—É–ª WB',
        'appType': '–¢–∏–ø–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        'date': '–î–∞—Ç–∞',
        'advertId': 'ID_–ö–∞–º–ø–∞–Ω–∏–∏'
    })

    print(f'–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã! –ö–∞–±–∏–Ω–µ—Ç: {name}')
    return group_df


if __name__ == '__main__':
    # –∑–∞–ø—É—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    # python -m scripts.get_advert --cabinet "–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –ò–ü –®–µ–ª—É–¥—å–∫–æ (–ª–µ—Ç–æ)"
    # –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    # python -m scripts.get_advert
    args = parse_args()
    selected = args.cabinet

    all_cabinets = get_api_in_master_table()

    cabinet = {}

    if selected:
        if selected in all_cabinets:
            api, _ = all_cabinets[selected]
            cabinet[selected] = get_fullstats_advert(name=selected, api=api)
            print(f"üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {selected}")

        else:
            print(f"‚ùå –ö–∞–±–∏–Ω–µ—Ç '{selected}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ master-—Ç–∞–±–ª–∏—Ü–µ.")
            exit(1)

    else:
        for name, (api, _) in all_cabinets.items():
            cabinet[name] = get_fullstats_advert(name=name, api=api)

    save_in_gsh(cabinet=cabinet, sheet_name='–†–ö(api)')
